'use strict';

const Emitter = require('events');
const http = require('http');
const onFinished = require('on-finished');
const compose = require('./compose');
const statuses = http.STATUS_CODES;

class Application extends Emitter{
  constructor(){
    super();
    this._middlewares = [];
  }

  use(){
    for(const fn of arguments){
      if(typeof fn !== 'function') throw new TypeError('use() only accept function');
      this._middlewares.push(fn);
    }
    return this;
  }

  // callback for http.createServer
  listener(){
    const stack = compose(this._middlewares);

    return (req, resp) => {
      const onerror = this.onerror.bind(this, resp);
      onFinished(resp, onerror);
      stack.call(this, req, resp).then(() => {
        if(resp.headersSent) return resp.end();

        resp.statusCode = 404;
        resp.end(statuses[404]);
      }).catch(onerror);
    };
  }

  listen(){
    const server = http.createServer(this.listener());
    return server.listen.apply(server, arguments);
  }

  onerror(resp, err){
    if(!err) return;

    if(this.listenerCount('error') <= 0){
      console.error('caught an error in coe: %s', err.stack || err.toString());
    }else{
      this.emit('error', err);
    }

    if(resp.headersSent) return resp.end();
    resp.statusCode = 500;
    resp.end(statuses[500]);
  }
}

module.exports = function(){
  return new Application();
};
