'use strict';

function compose(middlewares){
  return function (req, resp, outerNext){
    if(!outerNext) outerNext = noop;

    let lastIndex = -1;// last run middleware index
    const next = (ii) => {
      if(ii <= lastIndex) throw new Error('next() called multiple times');
      lastIndex = ii;
      
      if(ii >= middlewares.length){
        return Promise.resolve(outerNext())
      }
      const mw = middlewares[ii];

      try{
        return Promise.resolve(mw.call(this, req, resp, () => next(ii + 1)));
      }catch(e){
        return Promise.reject(e);
      }
    };
    return next(0);
  };
}

function noop(){}

module.exports = compose;
